{"version":3,"sources":["Constants/Utils.ts","Sorter/index.ts","Sorter/Sorter.ts","Reducers/index.ts","Constants/ActionTypes.ts","Store/index.ts","Middlewares/index.ts","Actions/index.ts","components/ArrayInput/ArrayInput.tsx","components/ArrayInput/index.ts","components/LengthInput/LengthInput.tsx","components/LengthInput/index.ts","components/SortInput/SortInput.tsx","components/SortInput/index.ts","components/SpeedInput/SpeedInput.tsx","components/SpeedInput/index.ts","components/StartButton/StartButton.tsx","components/StartButton/index.ts","components/Sidebar/Sidebar.tsx","components/Sidebar/index.ts","components/Bar/Bar.tsx","components/Bar/index.ts","components/Playground/Playground.tsx","components/Playground/index.ts","App.tsx","serviceWorker.js","components/ThemeContext/ThemeContext.tsx","index.tsx"],"names":["interpolateSpeed","speed","Math","floor","parseInt","sleep","ms","a","Promise","r","setTimeout","generateArrayFromOptions","length","initial","arrLength","result","Array","from","value","isCompared","isSwapped","i","array","j","random","shuffle","swapFactor","MAX_SWAP_FACTOR","maxSwaps","swapInterval","position","slotSwap","darkTheme","lightTheme","Sorter","arr","this","n","arrayCopy","type","first","second","indexMin","left","right","x","index","merge","_mergeSort","mid","start2","_quickSort","last","pivot","maxRange","max","map","v","countArr","fill","k","toPlace","_countingSort","digit","output","count","maxArr","_merge","RUN","insertionSort","min","size","_maxHeapify","_buildMaxHeap","_heapSort","values","heapSize","l","_left","_right","largest","heapArr","getSortingGenerator","algorithm","s","bubbleSort","selectionSort","mergeSort","heapSort","quickSort","timSort","initialState","bars","shouldSort","initialArray","arraySize","actions","isDark","nextAction","errors","rootReducer","state","action","payload","store","createStore","composeWithDevTools","applyMiddleware","thunk","dispatch","next","intSize","isNaN","validateArraySize","initialType","Wrapper","styled","div","Title","p","Select","select","types","NS","IS","RD","ArrayInput","connect","setInitialArray","onChange","e","target","t","key","Input","input","props","mapPropsToBorder","error","ErrorMsg","LengthInput","setArraySize","useState","setLocalArraySize","changeSize","algos","SortInput","setAlgorithm","SpeedInput","setSpeed","setLocalSpeed","onMouseUp","onTouchEnd","Button","button","P","StartButton","startSorting","getState","newAction","undefined","swapColors","newState","onClick","TitleWrapper","Sidebar","Container","height","minInterval","mapPropsToTransition","Bar","bar","highest","total","Playground","setBars","useEffect","barArray","temp","forEach","b","AppWrapper","App","Boolean","window","location","hostname","match","ThemeContext","React","createContext","toggle","setIsDark","children","useLayoutEffect","theme","themeToApply","document","getElementsByTagName","style","cssText","join","Provider","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8962dd16.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { IBar } from \"./ActionTypes\";\n\nconst shuffle = (array: Array<any>): void => {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n};\n\nexport const interpolateSpeed = (speed: string) =>\n  Math.floor((parseInt(speed) / 100) * (0 - 3000) + 3000);\n\nexport const sleep = async (ms: number): Promise<any> =>\n  new Promise(r => setTimeout(r, ms));\n\nexport const generateArrayFromOptions = (\n  length: string,\n  initial: string\n): Array<IBar> => {\n  const arrLength = parseInt(length);\n  let result = Array.from({ length: arrLength }, () => ({\n    value: 0,\n    isCompared: false,\n    isSwapped: false\n  }));\n  if (initial === \"Random\") {\n    for (let i = 0; i < arrLength; i++) {\n      result[i].value = i + 1;\n    }\n    shuffle(result);\n  } else if (initial === \"Reversed\") {\n    for (let i = 0; i < arrLength; i++) {\n      result[arrLength - i - 1].value = i + 1;\n    }\n  } else {\n    for (let i = 0; i < arrLength; i++) {\n      result[i].value = i + 1;\n    }\n    // 20% of elements will be shuffled\n    const swapFactor = MAX_SWAP_FACTOR;\n    let maxSwaps = Math.floor(swapFactor * arrLength);\n    const swapInterval = Math.floor(1 / swapFactor);\n\n    let position = 0;\n    while (maxSwaps && position < arrLength) {\n      const slotSwap = Math.floor(Math.random() * swapInterval) + position;\n      [result[slotSwap].value, result[position].value] = [\n        result[position].value,\n        result[slotSwap].value\n      ];\n      maxSwaps--;\n      position += swapInterval;\n    }\n  }\n  return result;\n};\n\nconst getWindowDimensions = () => {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height\n  };\n};\n\nexport function useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(\n    getWindowDimensions()\n  );\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return windowDimensions;\n}\n\n// VALUES\nexport const MIN_SIZE = 1;\nexport const MAX_SIZE = 100;\nexport const MIN_VALUE_DISPLAY_FACTOR = 24.0;\nconst MAX_SWAP_FACTOR = 0.2;\n\nexport const darkTheme = [\n  \"--sidebar: #435055\",\n  \"--copyOtherSidebar: #34495e\",\n  \"--title: #f0ece2\",\n  \"--start: #34495e\",\n  \"--bar: #ecfcff\",\n  \"--compared: #ff6361\",\n  \"--swapped: #4ecca3\",\n  \"--background: #000\"\n];\nexport const lightTheme = [\n  \"--sidebar: #307672\",\n  \"--copyOtherSidebar: #1a3c40\",\n  \"--title: #000\",\n  \"--start: #1a3c40\",\n  \"--bar: #000\",\n  \"--compared: #e84545\",\n  \"--swapped: #2eb872\",\n  \"--background: #e4eddb\"\n];\n","import Sorter from \"./Sorter\";\nexport default Sorter;\n","import { IBar, IAction } from \"../Constants/ActionTypes\";\n\nexport default class Sorter {\n  arr: Array<IBar>;\n\n  constructor(array: Array<IBar>) {\n    this.arr = array;\n  }\n\n  *bubbleSort(): IterableIterator<IAction> {\n    let n = this.arr.length;\n    let arrayCopy = [...this.arr];\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < n - i - 1; j++) {\n        yield { type: \"comparison\", first: j, second: j + 1 };\n        if (arrayCopy[j].value > arrayCopy[j + 1].value) {\n          yield { type: \"swap\", first: j, second: j + 1 };\n          [arrayCopy[j], arrayCopy[j + 1]] = [arrayCopy[j + 1], arrayCopy[j]];\n        }\n      }\n    }\n  }\n\n  *selectionSort(): IterableIterator<IAction> {\n    let n = this.arr.length;\n    let arrayCopy = [...this.arr];\n    for (let i = 0; i < n; i++) {\n      let indexMin = i;\n      for (let j = i + 1; j < n; j++) {\n        yield { type: \"comparison\", first: indexMin, second: j };\n        if (arrayCopy[j].value < arrayCopy[indexMin].value) {\n          indexMin = j;\n        }\n      }\n      yield { type: \"swap\", first: indexMin, second: i };\n      [arrayCopy[indexMin], arrayCopy[i]] = [arrayCopy[i], arrayCopy[indexMin]];\n    }\n  }\n\n  *insertionSort(\n    left: number = 0,\n    right: number = this.arr.length\n  ): IterableIterator<IAction> {\n    let arrayCopy = [...this.arr];\n    for (let i = left + 1; i < right; i++) {\n      const x = arrayCopy[i].value;\n      let j = i;\n      yield { type: \"comparison\", first: j - 1, second: i };\n      while (j > left && arrayCopy[j - 1].value > x) {\n        yield { type: \"changeValue\", index: j, value: arrayCopy[j - 1].value };\n        arrayCopy[j].value = arrayCopy[j - 1].value;\n        j--;\n        // yield compare if next is a comparison\n        if (j > left) {\n          yield { type: \"comparison\", first: j - 1, second: i };\n        }\n      }\n      yield { type: \"changeValue\", index: j, value: x };\n      arrayCopy[j].value = x;\n    }\n  }\n\n  *mergeSort(): IterableIterator<IAction> {\n    function* merge(\n      arr: Array<IBar>,\n      left: number,\n      mid: number,\n      right: number\n    ): IterableIterator<IAction> {\n      let start2 = mid + 1;\n\n      if (arr[mid].value <= arr[start2].value) {\n        return;\n      }\n\n      while (left <= mid && start2 <= right) {\n        // If element 1 is in right place\n        yield { type: \"comparison\", first: left, second: start2 };\n        if (arr[left].value <= arr[start2].value) {\n          left++;\n        } else {\n          const value = arr[start2].value;\n          let index = start2;\n\n          // Shift all the elements between element 1\n          // element 2, right by 1.\n          while (index !== left) {\n            yield { type: \"changeValue\", index, value: arr[index - 1].value };\n            arr[index].value = arr[index - 1].value;\n            index--;\n          }\n          yield { type: \"changeValue\", index: left, value };\n          arr[left].value = value;\n\n          // Update all the pointers\n          left++;\n          mid++;\n          start2++;\n        }\n      }\n    }\n\n    function* _mergeSort(\n      arr: Array<IBar>,\n      left: number,\n      right: number\n    ): IterableIterator<IAction> {\n      if (left < right) {\n        const mid = Math.floor((left + right) / 2);\n        yield* _mergeSort(arr, 0, mid);\n        yield* _mergeSort(arr, mid + 1, right);\n        yield* merge(arr, left, mid, right);\n      }\n    }\n\n    const arr = [...this.arr];\n    yield* _mergeSort(arr, 0, arr.length - 1);\n  }\n\n  *quickSort(): IterableIterator<IAction> {\n    function* _quickSort(\n      arr: Array<IBar>,\n      first: number = 0,\n      last: number = arr.length - 1\n    ): IterableIterator<IAction> {\n      if (first < last) {\n        let pivot = arr[last].value;\n        let i = first - 1;\n\n        for (let j = first; j < last; j++) {\n          yield { type: \"comparison\", first: j, second: last };\n          if (arr[j].value < pivot) {\n            i++;\n            yield { type: \"swap\", first: i, second: j };\n            [arr[i], arr[j]] = [arr[j], arr[i]];\n          }\n        }\n        yield { type: \"swap\", first: i + 1, second: last };\n        [arr[i + 1], arr[last]] = [arr[last], arr[i + 1]];\n        pivot = i + 1;\n        yield* _quickSort(arr, first, pivot - 1);\n        yield* _quickSort(arr, pivot + 1, last);\n      }\n    }\n\n    const arr = [...this.arr];\n    yield* _quickSort(arr);\n  }\n\n  countingSort(): Array<number> {\n    const arr = [...this.arr];\n    const n = arr.length;\n    const maxRange = Math.max(...arr.map(v => v.value));\n    // grouping values by counts\n    let countArr = new Array(maxRange + 1).fill(0);\n    for (let i = 0; i < n; i++) {\n      countArr[arr[i].value] += 1;\n    }\n    // cumulative sum in counts\n    for (let j = 1; j < countArr.length; j++) {\n      countArr[j] += countArr[j - 1];\n    }\n    // displacing elements to the right\n    for (let k = countArr.length - 1; k > 0; k--) {\n      countArr[k] = countArr[k - 1];\n    }\n    countArr[0] = 0;\n    let result = new Array(n);\n    for (let i = 0; i < n; i++) {\n      const toPlace = arr[i].value;\n      const placeIndex = countArr[toPlace];\n      result[placeIndex] = toPlace;\n      countArr[toPlace]++;\n    }\n    return result;\n  }\n\n  radixSort(arr: Array<number>): void {\n    const _countingSort = (arr: Array<number>, digit: number): void => {\n      const n = arr.length;\n      let output = new Array(n).fill(0);\n      let count = new Array(10).fill(0);\n      for (let i = 0; i < n; i++) {\n        const index = arr[i] / digit;\n        count[index % 10] += 1;\n      }\n      for (let j = 1; j < 10; j++) {\n        count[j] += count[j - 1];\n      }\n      let i = n - 1;\n      while (i >= 0) {\n        const index = arr[i] / digit;\n        output[count[index % 10] - 1] = arr[i];\n        count[index % 10] -= 1;\n        i -= 1;\n      }\n      i = 0;\n      for (i = 0; i < n; i++) {\n        arr[i] = output[i];\n      }\n    };\n\n    const maxArr = Math.max(...arr);\n    let digit = 1;\n    while (Math.floor(maxArr / digit) > 0) {\n      _countingSort(arr, digit);\n      digit *= 10;\n    }\n  }\n\n  *timSort(RUN: number = 32): IterableIterator<IAction> {\n    function* _merge(\n      arr: Array<IBar>,\n      left: number,\n      mid: number,\n      right: number\n    ): IterableIterator<IAction> {\n      let start2 = mid + 1;\n\n      if (arr[mid].value <= arr[start2].value) {\n        return;\n      }\n\n      while (left <= mid && start2 <= right) {\n        // If element 1 is in right place\n        yield { type: \"comparison\", first: left, second: start2 };\n        if (arr[left].value <= arr[start2].value) {\n          left++;\n        } else {\n          const value = arr[start2].value;\n          let index = start2;\n\n          // Shift all the elements between element 1\n          // element 2, right by 1.\n          while (index !== left) {\n            yield { type: \"changeValue\", index, value: arr[index - 1].value };\n            arr[index].value = arr[index - 1].value;\n            index--;\n          }\n          yield { type: \"changeValue\", index: left, value };\n          arr[left].value = value;\n\n          // Update all the pointers\n          left++;\n          mid++;\n          start2++;\n        }\n      }\n    }\n\n    const arr = [...this.arr];\n    const n = arr.length;\n    for (let i = 0; i < n; i += RUN) {\n      yield* this.insertionSort(i, Math.min(i + RUN + 1, n));\n    }\n    let size = RUN;\n    while (size < n) {\n      for (let left = 0; left < n; left += 2 * size) {\n        const mid = left + size - 1;\n        const right = Math.min(n - 1, left + 2 * size - 1);\n        yield* _merge(arr, left, mid, right);\n      }\n      size *= 2;\n    }\n  }\n\n  *heapSort(): IterableIterator<IAction> {\n    interface heapArray {\n      values: Array<IBar>;\n      heapSize: number;\n    }\n    const _right = (i: number): number => 2 * i + 2;\n    const _left = (i: number): number => 2 * i + 1;\n    function* _maxHeapify(\n      arr: heapArray,\n      i: number\n    ): IterableIterator<IAction> {\n      const l = _left(i);\n      const r = _right(i);\n      let largest = i;\n      if (l < arr.heapSize) {\n        yield { type: \"comparison\", first: l, second: i };\n        if (arr.values[l].value > arr.values[i].value) {\n          largest = l;\n        }\n      }\n      if (r < arr.heapSize) {\n        yield { type: \"comparison\", first: r, second: largest };\n        if (arr.values[r].value > arr.values[largest].value) {\n          largest = r;\n        }\n      }\n      if (largest !== i) {\n        yield { type: \"swap\", first: i, second: largest };\n        [arr.values[i], arr.values[largest]] = [\n          arr.values[largest],\n          arr.values[i]\n        ];\n        yield* _maxHeapify(arr, largest);\n      }\n    }\n    function* _buildMaxHeap(arr: heapArray): IterableIterator<IAction> {\n      arr.heapSize = arr.values.length;\n      for (let i = Math.floor(arr.values.length / 2); i >= 0; i--) {\n        yield* _maxHeapify(arr, i);\n      }\n    }\n    function* _heapSort(arr: heapArray): IterableIterator<IAction> {\n      yield* _buildMaxHeap(arr);\n      for (let i = arr.values.length - 1; i > 0; i--) {\n        yield { type: \"swap\", first: 0, second: i };\n        [arr.values[0], arr.values[i]] = [arr.values[i], arr.values[0]];\n        arr.heapSize -= 1;\n        yield* _maxHeapify(arr, 0);\n      }\n    }\n    const arr = [...this.arr];\n    const heapArr: heapArray = {\n      values: arr,\n      heapSize: 0\n    };\n    yield* _heapSort(heapArr);\n  }\n}\n","import {\n  SET_BARS,\n  START_SORTING,\n  SET_SPEED,\n  SET_ALGORITHM,\n  SET_INITIAL_ARRAY,\n  SET_ARRAY_SIZE,\n  SET_ERROR_ARRAY_SIZE,\n  SET_ACTIONS,\n  SET_NEXT_ACTION,\n  SET_SWITCH\n} from \"../Constants/ActionTypes\";\nimport { generateArrayFromOptions } from \"../Constants/Utils\";\nimport Sorter from \"../Sorter\";\nimport { IBar, IAction } from \"../Constants/ActionTypes\";\n\ninterface IState {\n  bars: Array<IBar>;\n  shouldSort: boolean;\n  speed: string;\n  algorithm: string;\n  initialArray: string;\n  arraySize: string;\n  isDark: boolean;\n  actions: IterableIterator<IAction> | null;\n  nextAction: IAction | null;\n  errors: object;\n}\n\nconst getSortingGenerator = (\n  algorithm: string,\n  s: Sorter\n): IterableIterator<IAction> | null => {\n  switch (algorithm) {\n    case \"Bubble Sort\":\n      return s.bubbleSort();\n    case \"Insertion Sort\":\n      return s.insertionSort();\n    case \"Selection Sort\":\n      return s.selectionSort();\n    case \"Merge Sort\":\n      return s.mergeSort();\n    case \"Heap Sort\":\n      return s.heapSort();\n    case \"Quick Sort\":\n      return s.quickSort();\n    case \"Tim Sort\":\n      return s.timSort();\n    default:\n      return null;\n  }\n};\n\nconst initialState: IState = {\n  bars: generateArrayFromOptions(\"10\", \"Random\"),\n  shouldSort: false,\n  speed: \"50\",\n  algorithm: \"Bubble Sort\",\n  initialArray: \"Random\",\n  arraySize: \"10\",\n  actions: null,\n  isDark: false,\n  nextAction: null,\n  errors: {\n    arraySize: null\n  }\n};\n\nconst rootReducer = (state = initialState, action: any): IState => {\n  if (action.type === START_SORTING) {\n    const { shouldSort } = action.payload;\n    let actions = null;\n    let nextAction = null;\n    let { bars } = state;\n    if (shouldSort) {\n      const { algorithm } = state;\n      const s = new Sorter(bars);\n      actions = getSortingGenerator(algorithm, s);\n    } else {\n      bars = generateArrayFromOptions(state.arraySize, state.initialArray);\n      actions = null;\n      nextAction = null;\n    }\n    return { ...state, actions, shouldSort, nextAction, bars };\n  } else if (action.type === SET_SPEED) {\n    const { speed } = action.payload;\n    return { ...state, speed };\n  } else if (action.type === SET_SWITCH) {\n    const { isDark } = action.payload;\n    return { ...state, isDark };\n  } else if (action.type === SET_ALGORITHM) {\n    const { algorithm } = action.payload;\n    const bars = generateArrayFromOptions(state.arraySize, state.initialArray);\n    const s = new Sorter(bars);\n    const actions = getSortingGenerator(algorithm, s);\n    const shouldSort = false;\n    const nextAction = null;\n    return { ...state, algorithm, bars, actions, shouldSort, nextAction };\n  } else if (action.type === SET_INITIAL_ARRAY) {\n    const { initialArray } = action.payload;\n    const bars = generateArrayFromOptions(state.arraySize, initialArray);\n    const s = new Sorter(bars);\n    const { algorithm } = state;\n    const actions = getSortingGenerator(algorithm, s);\n    const shouldSort = false;\n    const nextAction = null;\n    return { ...state, initialArray, bars, actions, shouldSort, nextAction };\n  } else if (action.type === SET_ARRAY_SIZE) {\n    const { arraySize } = action.payload;\n    const bars = generateArrayFromOptions(arraySize, state.initialArray);\n    const { algorithm } = state;\n    const s = new Sorter(bars);\n    const actions = getSortingGenerator(algorithm, s);\n    const shouldSort = false;\n    const nextAction = null;\n    return { ...state, arraySize, bars, actions, shouldSort, nextAction};\n  } else if (action.type === SET_ERROR_ARRAY_SIZE) {\n    const errors = action.payload;\n    const bars =\n      errors.arraySize === null\n        ? generateArrayFromOptions(state.arraySize, state.initialArray)\n        : [];\n    return { ...state, errors: { ...state.errors, ...errors }, bars };\n  } else if (action.type === SET_BARS) {\n    const { bars } = action.payload;\n    return { ...state, bars };\n  } else if (action.type === SET_ACTIONS) {\n    const { actions } = action.payload;\n    return { ...state, actions };\n  } else if (action.type === SET_NEXT_ACTION) {\n    let nextAction = action.payload;\n    const { shouldSort } = state;\n    if (!shouldSort) nextAction = null;\n    return { ...state, nextAction };\n  }\n  return state;\n};\n\nexport default rootReducer;\n","export const START_SORTING = \"START_SORTING\";\nexport const SET_SPEED = \"SET_SPEED\";\nexport const SET_ALGORITHM = \"SET_ALGORITHM\";\nexport const SET_INITIAL_ARRAY = \"SET_INITIAL_ARRAY\";\nexport const SET_ARRAY_SIZE = \"SET_ARRAY_SIZE\";\nexport const SET_ERROR_ARRAY_SIZE = \"SET_ERROR_ARRAY_SIZE\";\nexport const SET_BARS = \"SET_BARS\";\nexport const SET_ACTIONS = \"SET_ACTIONS\";\nexport const SET_NEXT_ACTION = \"SET_NEXT_ACTION\";\nexport const SET_SWITCH = \"SET_SWITCH\";\n\n// Interfaces\nexport interface IBar {\n  value: number;\n  isSwapped: boolean;\n  isCompared: boolean;\n}\n\nexport interface IAction {\n  type: string;\n  first?: number;\n  second?: number;\n  index?: number;\n  value?: number;\n}\n\nexport interface ISizeError {\n  arraySize: string | null;\n}\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { arraySizeMiddleware } from \"../Middlewares\";\nimport rootReducer from \"../Reducers\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk, arraySizeMiddleware))\n);\n\nexport default store;\n","import { SET_ARRAY_SIZE } from \"../Constants/ActionTypes\";\nimport { setErrorArraySize } from \"../Actions\";\nimport { MIN_SIZE, MAX_SIZE } from \"../Constants/Utils\";\nimport { Dispatch } from \"redux\";\nimport { ISizeError } from \"../Constants/ActionTypes\";\n\ninterface IMiddleware {\n  dispatch: Dispatch<any>;\n  getState?: any;\n}\n\nconst validateArraySize = (arraySize: string): ISizeError => {\n  const result: ISizeError = { arraySize: null };\n  const intSize = parseInt(arraySize);\n  if (isNaN(intSize)) {\n    result.arraySize = \"This is not a number\";\n    return result;\n  }\n  if (intSize < MIN_SIZE || intSize > MAX_SIZE) {\n    result.arraySize = `The number must be between ${MIN_SIZE} and ${MAX_SIZE}`;\n    return result;\n  }\n  return result;\n};\n\nexport const arraySizeMiddleware = ({ dispatch }: IMiddleware) => (\n  next: any\n) => (action: any) => {\n  if (action.type !== SET_ARRAY_SIZE) {\n    return next(action);\n  }\n  const { arraySize } = action.payload;\n  const errors: ISizeError = validateArraySize(arraySize);\n  if (errors.arraySize === null) {\n    next(action);\n  }\n  dispatch(setErrorArraySize(errors));\n};\n","import {\n  SET_BARS,\n  START_SORTING,\n  SET_SPEED,\n  SET_ALGORITHM,\n  SET_INITIAL_ARRAY,\n  SET_ARRAY_SIZE,\n  SET_ERROR_ARRAY_SIZE,\n  SET_ACTIONS,\n  SET_NEXT_ACTION,\n  SET_SWITCH\n} from \"../Constants/ActionTypes\";\nimport { sleep, interpolateSpeed } from \"../Constants/Utils\";\n\nexport const startSorting = (payload: object) => async (\n  dispatch: any,\n  getState: any\n) => {\n  dispatch({\n    type: START_SORTING,\n    payload\n  });\n  const { actions } = getState();\n  if (actions !== null) {\n    let { shouldSort, speed } = getState();\n    while (shouldSort) {\n      let newAction = actions.next();\n      const payload = newAction.value;\n      if (payload === undefined) {\n        const cleanAction = {\n          type: \"clean\"\n        };\n        dispatch({\n          type: SET_NEXT_ACTION,\n          payload: cleanAction\n        });\n        break;\n      }\n      if (payload.type === \"comparison\") {\n        const cleanAction = {\n          type: \"clean\"\n        };\n        dispatch({\n          type: SET_NEXT_ACTION,\n          payload: cleanAction\n        });\n        await sleep(interpolateSpeed(speed));\n      } else if (payload.type === \"swap\") {\n        const swapColors = {\n          type: \"swapColors\",\n          first: payload.first,\n          second: payload.second\n        };\n        dispatch({\n          type: SET_NEXT_ACTION,\n          payload: swapColors\n        });\n        await sleep(interpolateSpeed(speed));\n      }\n      dispatch({\n        type: SET_NEXT_ACTION,\n        payload\n      });\n      await sleep(interpolateSpeed(speed));\n      let newState = getState();\n      shouldSort = newState.shouldSort;\n      newAction = newState.nextAction;\n      speed = newState.speed;\n    }\n  }\n};\n\nexport const setBars = (payload: object) => ({\n  type: SET_BARS,\n  payload\n});\n\nexport const setSwitch = (payload: object) => ({\n  type: SET_SWITCH,\n  payload\n});\n\nexport const setSpeed = (payload: object) => ({\n  type: SET_SPEED,\n  payload\n});\n\nexport const setAlgorithm = (payload: object) => ({\n  type: SET_ALGORITHM,\n  payload\n});\n\nexport const setInitialArray = (payload: object) => ({\n  type: SET_INITIAL_ARRAY,\n  payload\n});\n\nexport const setArraySize = (payload: object) => ({\n  type: SET_ARRAY_SIZE,\n  payload\n});\n\nexport const setErrorArraySize = (payload: object) => ({\n  type: SET_ERROR_ARRAY_SIZE,\n  payload\n});\n\nexport const setActions = (payload: object) => ({\n  type: SET_ACTIONS,\n  payload\n});\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { connect } from \"react-redux\";\nimport { setInitialArray } from \"../../Actions\";\n\ninterface IState {\n  initialArray: string;\n}\n\nconst mapStateToProps = (state: IState) => ({\n  initialArray: state.initialArray\n});\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  setInitialArray: (initialArray: string) =>\n    dispatch(setInitialArray({ initialArray }))\n});\n\nconst Wrapper = styled.div`\n  width: 10%;\n  margin: 0.7% 2% auto 2%;\n`;\nconst Title = styled.p`\n  font-weight: bold;\n  font-family: Open Sans;\n  font-size: 16;\n  color: var(--title);\n`;\nconst Select = styled.select`\n  padding: 0.5em;\n  background: #ecfcff;\n  border: none;\n  border-radius: 20px;\n  width: 90%;\n`;\n\nenum initialType {\n  NS = \"Nearly Sorted\",\n  IS = \"Reversed\",\n  RD = \"Random\"\n}\n\ninterface IProps {\n  setInitialArray: (initialArray: string) => void;\n  initialArray: string;\n}\n\nconst types = [initialType.NS, initialType.IS, initialType.RD];\n\nconst ArrayInput: React.FC<IProps> = ({ setInitialArray, initialArray }) => (\n  <Wrapper>\n    <Title>Element's Position</Title>\n    <Select\n      value={initialArray}\n      onChange={e => setInitialArray(e.target.value)}\n    >\n      {types.map((t, i) => (\n        <option key={i} value={t}>\n          {t}\n        </option>\n      ))}\n    </Select>\n  </Wrapper>\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ArrayInput);\n","import ArrayInput from \"./ArrayInput\";\nexport default ArrayInput;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { connect } from \"react-redux\";\nimport { setArraySize } from \"../../Actions\";\nimport { ISizeError } from \"../../Constants/ActionTypes\";\n\ninterface IState {\n  errors: ISizeError;\n}\n\ninterface InputProps {\n  error: ISizeError;\n}\n\nconst mapStateToProps = (state: IState) => ({\n  errors: state.errors\n});\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  setArraySize: (arraySize: string) => dispatch(setArraySize({ arraySize }))\n});\n\nconst Wrapper = styled.div`\n  width: 9%;\n  margin: auto 2% auto 6%;\n`;\nconst Title = styled.p`\n  font-weight: bold;\n  font-family: Open Sans;\n  font-size: 16;\n  color: var(--title);\n`;\nconst Input = styled.input<InputProps>`\n  padding: 0.5em;\n  background: #ecfcff;\n  border-radius: 20px;\n  width: 90%;\n  border: ${props => mapPropsToBorder(props.error)};\n  transition: all ease-in-out 0.3s;\n`;\nconst ErrorMsg = styled.p`\n  font-family: Open Sans;\n  font-size: 10;\n  color: var(--compared);\n  transition: all ease-in-out 0.3s;\n`;\n\nconst mapPropsToBorder = (error: ISizeError): string => {\n  if (error.arraySize !== null) {\n    return `2px solid var(--compared)`;\n  }\n  return `none`;\n};\n\ninterface IProps {\n  setArraySize: (arraySize: string) => void;\n  errors: ISizeError;\n}\n\nconst LengthInput: React.FC<IProps> = ({ setArraySize, errors }) => {\n  const [arraySize, setLocalArraySize] = useState(\"10\");\n  const changeSize = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setLocalArraySize(e.target.value);\n    setArraySize(e.target.value);\n  };\n\n  return (\n    <Wrapper>\n      <Title>Array Size</Title>\n      <Input error={errors} onChange={e => changeSize(e)} value={arraySize} />\n      <ErrorMsg>{errors.arraySize}</ErrorMsg>\n    </Wrapper>\n  );\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(LengthInput);\n","import LengthInput from \"./LengthInput\";\nexport default LengthInput;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { connect } from \"react-redux\";\nimport { setAlgorithm } from \"../../Actions\";\n\ninterface IState {\n  algorithm: string;\n}\n\nconst mapStateToProps = (state: IState) => ({ algorithm: state.algorithm });\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  setAlgorithm: (algorithm: string) => dispatch(setAlgorithm({ algorithm }))\n});\n\nconst Wrapper = styled.div`\n  width: 10%;\n  margin: 0.7% 2% auto 2%;\n`;\nconst Title = styled.p`\n  font-weight: bold;\n  font-family: Open Sans;\n  font-size: 16;\n  color: var(--title);\n`;\nconst Select = styled.select`\n  padding: 0.5em;\n  background: #ecfcff;\n  border: none;\n  border-radius: 20px;\n  width: 90%;\n`;\n\ninterface IProps {\n  setAlgorithm: (algorithm: string) => void;\n  algorithm: string;\n}\n\nconst algos = [\n  \"Bubble Sort\",\n  \"Insertion Sort\",\n  \"Selection Sort\",\n  \"Merge Sort\",\n  \"Quick Sort\",\n  \"Heap Sort\"\n];\n\nconst SortInput: React.FC<IProps> = ({ algorithm, setAlgorithm }) => (\n  <Wrapper>\n    <Title>Select Algorithm</Title>\n    <Select value={algorithm} onChange={e => setAlgorithm(e.target.value)}>\n      {algos.map((a, i) => (\n        <option key={i} value={a}>\n          {a}\n        </option>\n      ))}\n    </Select>\n  </Wrapper>\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SortInput);\n","import SortInput from \"./SortInput\";\nexport default SortInput;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { connect } from \"react-redux\";\nimport { setSpeed } from \"../../Actions\";\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  setSpeed: (speed: string) => dispatch(setSpeed({ speed }))\n});\n\nconst Wrapper = styled.div`\n  width: 10%;\n  margin: 0.7% 2% auto 2%;\n`;\nconst Title = styled.p`\n  font-weight: bold;\n  font-family: Open Sans;\n  font-size: 16;\n  color: var(--title);\n`;\nconst Input = styled.input`\n  appearance:none;\n  height: 1vh;\n  border-radius: 1em;\n  width: 90%;\n  &::-webkit-slider-thumb {\n    appearance: none;\n    box-shadow: 0 0 80px 10px #888888;\n    width: 1.5rem;\n    height: 1.5rem;\n    background-color: var(--background);\n    border: .25rem solid var(--bar);\n    border-radius: 3rem;\n    cursor: pointer;\n  }\n`;\n\ninterface IProps {\n  setSpeed: (speed: string) => void;\n}\n\nconst SpeedInput: React.FC<IProps> = ({ setSpeed }) => {\n  const [speed, setLocalSpeed] = useState(\"50\");\n\n  return (\n    <Wrapper>\n      <Title>Sorting Speed</Title>\n      <Input\n        type=\"range\"\n        min=\"0\"\n        max=\"100\"\n        value={speed}\n        onChange={e => setLocalSpeed(e.target.value)}\n        onMouseUp={() => setSpeed(speed)}\n        onTouchEnd={() => setSpeed(speed)}\n      />\n    </Wrapper>\n  );\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(SpeedInput);\n","import SpeedInput from \"./SpeedInput\";\nexport default SpeedInput;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { connect } from \"react-redux\";\nimport { startSorting } from \"../../Actions\";\n\ninterface IState {\n  shouldSort: boolean;\n}\n\nconst mapStateToProps = (state: IState) => ({ shouldSort: state.shouldSort });\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  startSorting: (shouldSort: boolean) => dispatch(startSorting({ shouldSort }))\n});\n\nconst Wrapper = styled.div`\n  width: 10%;\n  align-items: center;\n  justify-content: center;\n  margin: auto 2% auto 2%;\n`;\nconst Button = styled.button`\n  border: none;\n  border-radius: 10px;\n  width: 100%;\n  align-items: center;\n  justify-content: center;\n  background: var(--start);\n  cursor: pointer;\n`;\nconst P = styled.p`\n  text-transform: uppercase;\n  font-family: Open Sans;\n  color: white;\n  font-size: 1vw;\n  letter-spacing: 2px;\n`;\n\ninterface IProps {\n  startSorting: (shouldStart: boolean) => void;\n  shouldSort: boolean;\n}\n\nconst StartButton: React.FC<IProps> = ({ startSorting, shouldSort }) => (\n  <Wrapper>\n    <Button onClick={() => startSorting(!shouldSort)}>\n      <P>{shouldSort ? \"Reset\" : \"Start\"}</P>\n    </Button>\n  </Wrapper>\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(StartButton);\n","import StartButton from \"./StartButton\";\nexport default StartButton;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport ArrayInput from \"../ArrayInput\";\nimport LengthInput from \"../LengthInput\";\nimport SortInput from \"../SortInput\";\nimport SpeedInput from \"../SpeedInput\";\nimport StartButton from \"../StartButton\";\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 19.5vh;\n  background: var(--sidebar);\n  display: flex;\n`;\nconst TitleWrapper = styled.div`\n  width: 20%;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  margin: auto 3% auto 3%;\n`;\nconst Title = styled.p`\n  font-size: 2vw;\n  letter-spacing: 2px;\n  color: var(--bar);\n  font-weight: bold;\n  font-family: Open Sans;\n`;\n\nconst Sidebar: React.FC<{}> = () => (\n  <Wrapper>\n    <TitleWrapper>\n      <Title>AlgoSort - Sorting Visualiser</Title>\n    </TitleWrapper>\n    <LengthInput />\n    <ArrayInput />\n    <SortInput />\n    <SpeedInput />\n    <StartButton />\n  </Wrapper>\n);\nexport default Sidebar;\n","import Sidebar from \"./Sidebar\";\nexport default Sidebar;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { interpolateSpeed } from \"../../Constants/Utils\";\nimport { IBar } from \"../../Constants/ActionTypes\";\n\nconst mapPropsToColor = (isCompared: boolean, isSwapped: boolean): string => {\n  if (isCompared) {\n    return \"var(--compared)\";\n  }\n  if (isSwapped) {\n    return \"var(--swapped)\";\n  }\n  return \"var(--copyOtherSidebar)\";\n};\n\nconst mapPropsToTransition = (speed: string): string => {\n  const minInterval = Math.min(300, interpolateSpeed(speed));\n  return `all ease-in-out ${minInterval}ms`;\n};\n\nconst Container = styled.div<IBarContainerProps>`\n  height: ${props => props.height};\n  flex: 1;\n  background: ${props => mapPropsToColor(props.isCompared, props.isSwapped)};\n  transition: ${props => mapPropsToTransition(props.speed)};\n  color: var(--background);\n  font-size: 2vw;\n  font-family: Open Sans;\n  font-weight: bold;\n  justify-content: center;\n  align-items: center;\n  border-radius: 10px 10px 0 0;\n  display: flex;\n  border: 1px solid var(--background);\n`;\n\ninterface IBarContainerProps {\n  height: string;\n  total: number;\n  isSwapped: boolean;\n  isCompared: boolean;\n  speed: string;\n}\n\ninterface IProps {\n  value: IBar;\n  highest: number;\n  index: number;\n  speed: string;\n}\n\nconst Bar: React.FC<IProps> = ({ value: bar, highest, speed }) => {\n  const height = `${Math.floor((bar.value / highest) * 80)}vh`;\n\n  return (\n    <Container\n      height={height}\n      total={highest}\n      isSwapped={bar.isSwapped}\n      isCompared={bar.isCompared}\n      speed={speed}\n    >\n      {highest < 50 ? bar.value : null}\n    </Container>\n  );\n};\n\nexport default Bar;\n","import Bar from \"./Bar\";\nexport default Bar;\n","import React, { useEffect, useCallback } from \"react\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\nimport Bar from \"../Bar\";\nimport { setBars } from \"../../Actions\";\nimport { IBar, IAction } from \"../../Constants/ActionTypes\";\n\ninterface IProps {\n  bars: Array<IBar>;\n  setBars: (bars: Array<IBar>) => void;\n  nextAction: IAction | null;\n  speed: string;\n}\n\ninterface IState {\n  bars: Array<IBar>;\n  nextAction: IAction | null;\n  speed: string;\n}\n\nconst mapStateToProps = (state: IState) => ({\n  bars: state.bars,\n  nextAction: state.nextAction,\n  speed: state.speed\n});\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  setBars: (bars: Array<IBar>) => dispatch(setBars({ bars }))\n});\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 80%;\n  background: var(--background);\n  align-items: flex-end;\n  display: flex;\n`;\n\nconst Playground: React.FC<IProps> = ({ bars, setBars, nextAction, speed }) => {\n  useEffect(() => {\n    if (nextAction !== null && nextAction !== undefined) {\n      if (nextAction.type === \"comparison\") {\n        let barArray = [...bars];\n        barArray[nextAction.first!].isCompared = true;\n        barArray[nextAction.second!].isCompared = true;\n        setBars(barArray);\n      } else if (nextAction.type === \"swapColors\") {\n        let barArray = [...bars];\n        barArray[nextAction.first!].isCompared = false;\n        barArray[nextAction.second!].isCompared = false;\n        barArray[nextAction.first!].isSwapped = true;\n        barArray[nextAction.second!].isSwapped = true;\n        setBars(barArray);\n      } else if (nextAction.type === \"swap\") {\n        let barArray = [...bars];\n        let temp = barArray[nextAction.first!];\n        barArray[nextAction.first!] = barArray[nextAction.second!];\n        barArray[nextAction.second!] = temp;\n        setBars(barArray);\n      } else if (nextAction.type === \"clean\") {\n        let barArray = [...bars];\n        barArray.forEach(b => {\n          b.isCompared = false;\n          b.isSwapped = false;\n        });\n        setBars(barArray);\n      } else if (nextAction.type === \"changeValue\") {\n        let barArray = [...bars];\n        barArray[nextAction.index!].value = nextAction.value!;\n        barArray[nextAction.index!].isSwapped = true;\n        setBars(barArray);\n      }\n    }\n  }, [nextAction, setBars]);\n\n  return (\n    <Wrapper>\n      {bars.map((b, i) => (\n        <Bar speed={speed} key={i} value={b} highest={bars.length} index={i} />\n      ))}\n    </Wrapper>\n  );\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Playground);\n","import Playground from \"./Playground\";\nexport default Playground;\n","import * as React from \"react\";\n\nimport styled from \"styled-components\";\nimport Sidebar from \"./components/Sidebar\";\nimport Playground from \"./components/Playground\";\n\nconst AppWrapper = styled.div`\n  width:100%;\n  height: 100%;\n  display: block;\n  margin: 0;\n  padding: 0;\n`;\n\nconst App: React.FC = () => (\n  <AppWrapper>\n    <Sidebar />\n    <Playground />\n  </AppWrapper>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useLayoutEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { setSwitch } from \"../../Actions\";\nimport { lightTheme, darkTheme } from \"../../Constants/Utils\";\n\nconst ThemeContext = React.createContext({\n  isDark: true,\n  toggle: () => {}\n});\n\ninterface IState {\n  isDark: boolean;\n}\n\nconst mapStateToProps = (state: IState) => ({ isDark: state.isDark });\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  setIsDark: (isDark: boolean) => dispatch(setSwitch({ isDark }))\n});\n\ninterface IProps {\n  isDark: boolean;\n  setIsDark: (isDark: boolean) => void;\n}\n\nconst ThemeProvider: React.FC<IProps> = ({ isDark, setIsDark, children }) => {\n  // paints the app before it renders elements\n  useLayoutEffect(() => {\n    const applyTheme = (theme: Array<string>) => {\n      const root = document.getElementsByTagName(\"html\")[0];\n      root.style.cssText = theme.join(\";\");\n    };\n\n    const themeToApply = isDark ? darkTheme : lightTheme;\n    setIsDark(isDark);\n    applyTheme(themeToApply);\n    // if state changes, repaints the app\n  }, [isDark, setIsDark]);\n\n  const toggle = () => {\n    setIsDark(!isDark);\n  };\n\n  return (\n    <ThemeContext.Provider\n      value={{\n        isDark,\n        toggle\n      }}\n    >\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ThemeProvider);\n\nexport { ThemeContext };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./Store\";\nimport \"./style.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport ThemeProvider from \"./components/ThemeContext/ThemeContext\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <ThemeProvider>\n      <App />\n    </ThemeProvider>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}